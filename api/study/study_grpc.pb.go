// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: study.proto

package study

import (
	context "context"
	health "github.com/studyguides-com/study-guides-api/api/study/health"
	search "github.com/studyguides-com/study-guides-api/api/study/search"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StudyService_Search_FullMethodName      = "/study.StudyService/Search"
	StudyService_HealthCheck_FullMethodName = "/study.StudyService/HealthCheck"
)

// StudyServiceClient is the client API for StudyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyServiceClient interface {
	Search(ctx context.Context, in *search.SearchRequest, opts ...grpc.CallOption) (*search.SearchResponse, error)
	HealthCheck(ctx context.Context, in *health.HealthCheckRequest, opts ...grpc.CallOption) (*health.HealthCheckResponse, error)
}

type studyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyServiceClient(cc grpc.ClientConnInterface) StudyServiceClient {
	return &studyServiceClient{cc}
}

func (c *studyServiceClient) Search(ctx context.Context, in *search.SearchRequest, opts ...grpc.CallOption) (*search.SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(search.SearchResponse)
	err := c.cc.Invoke(ctx, StudyService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyServiceClient) HealthCheck(ctx context.Context, in *health.HealthCheckRequest, opts ...grpc.CallOption) (*health.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(health.HealthCheckResponse)
	err := c.cc.Invoke(ctx, StudyService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyServiceServer is the server API for StudyService service.
// All implementations must embed UnimplementedStudyServiceServer
// for forward compatibility.
type StudyServiceServer interface {
	Search(context.Context, *search.SearchRequest) (*search.SearchResponse, error)
	HealthCheck(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error)
	mustEmbedUnimplementedStudyServiceServer()
}

// UnimplementedStudyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStudyServiceServer struct{}

func (UnimplementedStudyServiceServer) Search(context.Context, *search.SearchRequest) (*search.SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedStudyServiceServer) HealthCheck(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedStudyServiceServer) mustEmbedUnimplementedStudyServiceServer() {}
func (UnimplementedStudyServiceServer) testEmbeddedByValue()                      {}

// UnsafeStudyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyServiceServer will
// result in compilation errors.
type UnsafeStudyServiceServer interface {
	mustEmbedUnimplementedStudyServiceServer()
}

func RegisterStudyServiceServer(s grpc.ServiceRegistrar, srv StudyServiceServer) {
	// If the following call pancis, it indicates UnimplementedStudyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StudyService_ServiceDesc, srv)
}

func _StudyService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(search.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).Search(ctx, req.(*search.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(health.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StudyService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyServiceServer).HealthCheck(ctx, req.(*health.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudyService_ServiceDesc is the grpc.ServiceDesc for StudyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "study.StudyService",
	HandlerType: (*StudyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _StudyService_Search_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _StudyService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "study.proto",
}
