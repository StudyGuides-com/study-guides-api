// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/tag/tag.proto

package tagv1

import (
	context "context"
	shared "github.com/studyguides-com/study-guides-api/api/v1/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TagService_GetTag_FullMethodName           = "/tag.v1.TagService/GetTag"
	TagService_ListTagsByParent_FullMethodName = "/tag.v1.TagService/ListTagsByParent"
	TagService_ListTagsByType_FullMethodName   = "/tag.v1.TagService/ListTagsByType"
	TagService_ListRootTags_FullMethodName     = "/tag.v1.TagService/ListRootTags"
	TagService_Report_FullMethodName           = "/tag.v1.TagService/Report"
	TagService_Favorite_FullMethodName         = "/tag.v1.TagService/Favorite"
	TagService_Unfavorite_FullMethodName       = "/tag.v1.TagService/Unfavorite"
)

// TagServiceClient is the client API for TagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagServiceClient interface {
	GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*shared.Tag, error)
	ListTagsByParent(ctx context.Context, in *ListTagsByParentRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	ListTagsByType(ctx context.Context, in *ListTagsByTypeRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	ListRootTags(ctx context.Context, in *ListRootTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	Report(ctx context.Context, in *ReportTagRequest, opts ...grpc.CallOption) (*ReportTagResponse, error)
	Favorite(ctx context.Context, in *FavoriteTagRequest, opts ...grpc.CallOption) (*FavoriteTagResponse, error)
	Unfavorite(ctx context.Context, in *UnfavoriteTagRequest, opts ...grpc.CallOption) (*UnfavoriteTagResponse, error)
}

type tagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagServiceClient(cc grpc.ClientConnInterface) TagServiceClient {
	return &tagServiceClient{cc}
}

func (c *tagServiceClient) GetTag(ctx context.Context, in *GetTagRequest, opts ...grpc.CallOption) (*shared.Tag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(shared.Tag)
	err := c.cc.Invoke(ctx, TagService_GetTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) ListTagsByParent(ctx context.Context, in *ListTagsByParentRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, TagService_ListTagsByParent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) ListTagsByType(ctx context.Context, in *ListTagsByTypeRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, TagService_ListTagsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) ListRootTags(ctx context.Context, in *ListRootTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, TagService_ListRootTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Report(ctx context.Context, in *ReportTagRequest, opts ...grpc.CallOption) (*ReportTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportTagResponse)
	err := c.cc.Invoke(ctx, TagService_Report_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Favorite(ctx context.Context, in *FavoriteTagRequest, opts ...grpc.CallOption) (*FavoriteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FavoriteTagResponse)
	err := c.cc.Invoke(ctx, TagService_Favorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagServiceClient) Unfavorite(ctx context.Context, in *UnfavoriteTagRequest, opts ...grpc.CallOption) (*UnfavoriteTagResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnfavoriteTagResponse)
	err := c.cc.Invoke(ctx, TagService_Unfavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServiceServer is the server API for TagService service.
// All implementations must embed UnimplementedTagServiceServer
// for forward compatibility.
type TagServiceServer interface {
	GetTag(context.Context, *GetTagRequest) (*shared.Tag, error)
	ListTagsByParent(context.Context, *ListTagsByParentRequest) (*ListTagsResponse, error)
	ListTagsByType(context.Context, *ListTagsByTypeRequest) (*ListTagsResponse, error)
	ListRootTags(context.Context, *ListRootTagsRequest) (*ListTagsResponse, error)
	Report(context.Context, *ReportTagRequest) (*ReportTagResponse, error)
	Favorite(context.Context, *FavoriteTagRequest) (*FavoriteTagResponse, error)
	Unfavorite(context.Context, *UnfavoriteTagRequest) (*UnfavoriteTagResponse, error)
	mustEmbedUnimplementedTagServiceServer()
}

// UnimplementedTagServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTagServiceServer struct{}

func (UnimplementedTagServiceServer) GetTag(context.Context, *GetTagRequest) (*shared.Tag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTag not implemented")
}
func (UnimplementedTagServiceServer) ListTagsByParent(context.Context, *ListTagsByParentRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTagsByParent not implemented")
}
func (UnimplementedTagServiceServer) ListTagsByType(context.Context, *ListTagsByTypeRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTagsByType not implemented")
}
func (UnimplementedTagServiceServer) ListRootTags(context.Context, *ListRootTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRootTags not implemented")
}
func (UnimplementedTagServiceServer) Report(context.Context, *ReportTagRequest) (*ReportTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedTagServiceServer) Favorite(context.Context, *FavoriteTagRequest) (*FavoriteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (UnimplementedTagServiceServer) Unfavorite(context.Context, *UnfavoriteTagRequest) (*UnfavoriteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfavorite not implemented")
}
func (UnimplementedTagServiceServer) mustEmbedUnimplementedTagServiceServer() {}
func (UnimplementedTagServiceServer) testEmbeddedByValue()                    {}

// UnsafeTagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServiceServer will
// result in compilation errors.
type UnsafeTagServiceServer interface {
	mustEmbedUnimplementedTagServiceServer()
}

func RegisterTagServiceServer(s grpc.ServiceRegistrar, srv TagServiceServer) {
	// If the following call pancis, it indicates UnimplementedTagServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TagService_ServiceDesc, srv)
}

func _TagService_GetTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).GetTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_GetTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).GetTag(ctx, req.(*GetTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_ListTagsByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).ListTagsByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_ListTagsByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).ListTagsByParent(ctx, req.(*ListTagsByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_ListTagsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).ListTagsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_ListTagsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).ListTagsByType(ctx, req.(*ListTagsByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_ListRootTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRootTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).ListRootTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_ListRootTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).ListRootTags(ctx, req.(*ListRootTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Report(ctx, req.(*ReportTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_Favorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Favorite(ctx, req.(*FavoriteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagService_Unfavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfavoriteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServiceServer).Unfavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TagService_Unfavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServiceServer).Unfavorite(ctx, req.(*UnfavoriteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagService_ServiceDesc is the grpc.ServiceDesc for TagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tag.v1.TagService",
	HandlerType: (*TagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTag",
			Handler:    _TagService_GetTag_Handler,
		},
		{
			MethodName: "ListTagsByParent",
			Handler:    _TagService_ListTagsByParent_Handler,
		},
		{
			MethodName: "ListTagsByType",
			Handler:    _TagService_ListTagsByType_Handler,
		},
		{
			MethodName: "ListRootTags",
			Handler:    _TagService_ListRootTags_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _TagService_Report_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _TagService_Favorite_Handler,
		},
		{
			MethodName: "Unfavorite",
			Handler:    _TagService_Unfavorite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/tag/tag.proto",
}
