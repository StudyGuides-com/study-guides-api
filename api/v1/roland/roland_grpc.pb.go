// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/roland/roland.proto

package rolandv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RolandService_SaveBundle_FullMethodName             = "/roland.v1.RolandService/SaveBundle"
	RolandService_Bundles_FullMethodName                = "/roland.v1.RolandService/Bundles"
	RolandService_BundlesByParserType_FullMethodName    = "/roland.v1.RolandService/BundlesByParserType"
	RolandService_UpdateGob_FullMethodName              = "/roland.v1.RolandService/UpdateGob"
	RolandService_DeleteAllBundles_FullMethodName       = "/roland.v1.RolandService/DeleteAllBundles"
	RolandService_DeleteBundleByID_FullMethodName       = "/roland.v1.RolandService/DeleteBundleByID"
	RolandService_DeleteBundlesByShortID_FullMethodName = "/roland.v1.RolandService/DeleteBundlesByShortID"
	RolandService_MarkBundleExported_FullMethodName     = "/roland.v1.RolandService/MarkBundleExported"
)

// RolandServiceClient is the client API for RolandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RolandServiceClient interface {
	// SaveBundle saves a bundle to the database
	SaveBundle(ctx context.Context, in *SaveBundleRequest, opts ...grpc.CallOption) (*SaveBundleResponse, error)
	// Bundles retrieves all bundles from the database
	Bundles(ctx context.Context, in *BundlesRequest, opts ...grpc.CallOption) (*BundlesResponse, error)
	// BundlesByParserType retrieves bundles filtered by parser type
	BundlesByParserType(ctx context.Context, in *BundlesByParserTypeRequest, opts ...grpc.CallOption) (*BundlesByParserTypeResponse, error)
	// UpdateGob updates the gob payload for a specific bundle
	UpdateGob(ctx context.Context, in *UpdateGobRequest, opts ...grpc.CallOption) (*UpdateGobResponse, error)
	// DeleteAllBundles deletes all bundles from the database
	DeleteAllBundles(ctx context.Context, in *DeleteAllBundlesRequest, opts ...grpc.CallOption) (*DeleteAllBundlesResponse, error)
	// DeleteBundleByID deletes a bundle by its ID
	DeleteBundleByID(ctx context.Context, in *DeleteBundleByIDRequest, opts ...grpc.CallOption) (*DeleteBundleByIDResponse, error)
	// DeleteBundlesByShortID deletes bundles by short ID
	DeleteBundlesByShortID(ctx context.Context, in *DeleteBundlesByShortIDRequest, opts ...grpc.CallOption) (*DeleteBundlesByShortIDResponse, error)
	// MarkBundleExported marks a bundle as exported to a specific environment
	MarkBundleExported(ctx context.Context, in *MarkBundleExportedRequest, opts ...grpc.CallOption) (*MarkBundleExportedResponse, error)
}

type rolandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRolandServiceClient(cc grpc.ClientConnInterface) RolandServiceClient {
	return &rolandServiceClient{cc}
}

func (c *rolandServiceClient) SaveBundle(ctx context.Context, in *SaveBundleRequest, opts ...grpc.CallOption) (*SaveBundleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveBundleResponse)
	err := c.cc.Invoke(ctx, RolandService_SaveBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) Bundles(ctx context.Context, in *BundlesRequest, opts ...grpc.CallOption) (*BundlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BundlesResponse)
	err := c.cc.Invoke(ctx, RolandService_Bundles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) BundlesByParserType(ctx context.Context, in *BundlesByParserTypeRequest, opts ...grpc.CallOption) (*BundlesByParserTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BundlesByParserTypeResponse)
	err := c.cc.Invoke(ctx, RolandService_BundlesByParserType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) UpdateGob(ctx context.Context, in *UpdateGobRequest, opts ...grpc.CallOption) (*UpdateGobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGobResponse)
	err := c.cc.Invoke(ctx, RolandService_UpdateGob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) DeleteAllBundles(ctx context.Context, in *DeleteAllBundlesRequest, opts ...grpc.CallOption) (*DeleteAllBundlesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAllBundlesResponse)
	err := c.cc.Invoke(ctx, RolandService_DeleteAllBundles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) DeleteBundleByID(ctx context.Context, in *DeleteBundleByIDRequest, opts ...grpc.CallOption) (*DeleteBundleByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBundleByIDResponse)
	err := c.cc.Invoke(ctx, RolandService_DeleteBundleByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) DeleteBundlesByShortID(ctx context.Context, in *DeleteBundlesByShortIDRequest, opts ...grpc.CallOption) (*DeleteBundlesByShortIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBundlesByShortIDResponse)
	err := c.cc.Invoke(ctx, RolandService_DeleteBundlesByShortID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolandServiceClient) MarkBundleExported(ctx context.Context, in *MarkBundleExportedRequest, opts ...grpc.CallOption) (*MarkBundleExportedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkBundleExportedResponse)
	err := c.cc.Invoke(ctx, RolandService_MarkBundleExported_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RolandServiceServer is the server API for RolandService service.
// All implementations must embed UnimplementedRolandServiceServer
// for forward compatibility.
type RolandServiceServer interface {
	// SaveBundle saves a bundle to the database
	SaveBundle(context.Context, *SaveBundleRequest) (*SaveBundleResponse, error)
	// Bundles retrieves all bundles from the database
	Bundles(context.Context, *BundlesRequest) (*BundlesResponse, error)
	// BundlesByParserType retrieves bundles filtered by parser type
	BundlesByParserType(context.Context, *BundlesByParserTypeRequest) (*BundlesByParserTypeResponse, error)
	// UpdateGob updates the gob payload for a specific bundle
	UpdateGob(context.Context, *UpdateGobRequest) (*UpdateGobResponse, error)
	// DeleteAllBundles deletes all bundles from the database
	DeleteAllBundles(context.Context, *DeleteAllBundlesRequest) (*DeleteAllBundlesResponse, error)
	// DeleteBundleByID deletes a bundle by its ID
	DeleteBundleByID(context.Context, *DeleteBundleByIDRequest) (*DeleteBundleByIDResponse, error)
	// DeleteBundlesByShortID deletes bundles by short ID
	DeleteBundlesByShortID(context.Context, *DeleteBundlesByShortIDRequest) (*DeleteBundlesByShortIDResponse, error)
	// MarkBundleExported marks a bundle as exported to a specific environment
	MarkBundleExported(context.Context, *MarkBundleExportedRequest) (*MarkBundleExportedResponse, error)
	mustEmbedUnimplementedRolandServiceServer()
}

// UnimplementedRolandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRolandServiceServer struct{}

func (UnimplementedRolandServiceServer) SaveBundle(context.Context, *SaveBundleRequest) (*SaveBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBundle not implemented")
}
func (UnimplementedRolandServiceServer) Bundles(context.Context, *BundlesRequest) (*BundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bundles not implemented")
}
func (UnimplementedRolandServiceServer) BundlesByParserType(context.Context, *BundlesByParserTypeRequest) (*BundlesByParserTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BundlesByParserType not implemented")
}
func (UnimplementedRolandServiceServer) UpdateGob(context.Context, *UpdateGobRequest) (*UpdateGobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGob not implemented")
}
func (UnimplementedRolandServiceServer) DeleteAllBundles(context.Context, *DeleteAllBundlesRequest) (*DeleteAllBundlesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllBundles not implemented")
}
func (UnimplementedRolandServiceServer) DeleteBundleByID(context.Context, *DeleteBundleByIDRequest) (*DeleteBundleByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBundleByID not implemented")
}
func (UnimplementedRolandServiceServer) DeleteBundlesByShortID(context.Context, *DeleteBundlesByShortIDRequest) (*DeleteBundlesByShortIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBundlesByShortID not implemented")
}
func (UnimplementedRolandServiceServer) MarkBundleExported(context.Context, *MarkBundleExportedRequest) (*MarkBundleExportedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkBundleExported not implemented")
}
func (UnimplementedRolandServiceServer) mustEmbedUnimplementedRolandServiceServer() {}
func (UnimplementedRolandServiceServer) testEmbeddedByValue()                       {}

// UnsafeRolandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RolandServiceServer will
// result in compilation errors.
type UnsafeRolandServiceServer interface {
	mustEmbedUnimplementedRolandServiceServer()
}

func RegisterRolandServiceServer(s grpc.ServiceRegistrar, srv RolandServiceServer) {
	// If the following call pancis, it indicates UnimplementedRolandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RolandService_ServiceDesc, srv)
}

func _RolandService_SaveBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).SaveBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_SaveBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).SaveBundle(ctx, req.(*SaveBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_Bundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).Bundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_Bundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).Bundles(ctx, req.(*BundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_BundlesByParserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundlesByParserTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).BundlesByParserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_BundlesByParserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).BundlesByParserType(ctx, req.(*BundlesByParserTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_UpdateGob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).UpdateGob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_UpdateGob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).UpdateGob(ctx, req.(*UpdateGobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_DeleteAllBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).DeleteAllBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_DeleteAllBundles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).DeleteAllBundles(ctx, req.(*DeleteAllBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_DeleteBundleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBundleByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).DeleteBundleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_DeleteBundleByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).DeleteBundleByID(ctx, req.(*DeleteBundleByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_DeleteBundlesByShortID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBundlesByShortIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).DeleteBundlesByShortID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_DeleteBundlesByShortID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).DeleteBundlesByShortID(ctx, req.(*DeleteBundlesByShortIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RolandService_MarkBundleExported_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkBundleExportedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolandServiceServer).MarkBundleExported(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RolandService_MarkBundleExported_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolandServiceServer).MarkBundleExported(ctx, req.(*MarkBundleExportedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RolandService_ServiceDesc is the grpc.ServiceDesc for RolandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RolandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roland.v1.RolandService",
	HandlerType: (*RolandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveBundle",
			Handler:    _RolandService_SaveBundle_Handler,
		},
		{
			MethodName: "Bundles",
			Handler:    _RolandService_Bundles_Handler,
		},
		{
			MethodName: "BundlesByParserType",
			Handler:    _RolandService_BundlesByParserType_Handler,
		},
		{
			MethodName: "UpdateGob",
			Handler:    _RolandService_UpdateGob_Handler,
		},
		{
			MethodName: "DeleteAllBundles",
			Handler:    _RolandService_DeleteAllBundles_Handler,
		},
		{
			MethodName: "DeleteBundleByID",
			Handler:    _RolandService_DeleteBundleByID_Handler,
		},
		{
			MethodName: "DeleteBundlesByShortID",
			Handler:    _RolandService_DeleteBundlesByShortID_Handler,
		},
		{
			MethodName: "MarkBundleExported",
			Handler:    _RolandService_MarkBundleExported_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/roland/roland.proto",
}
