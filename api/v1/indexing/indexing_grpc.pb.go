// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: v1/indexing/indexing.proto

package indexingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndexingService_TriggerIndexing_FullMethodName    = "/indexing.v1.IndexingService/TriggerIndexing"
	IndexingService_GetJobStatus_FullMethodName       = "/indexing.v1.IndexingService/GetJobStatus"
	IndexingService_ListRunningJobs_FullMethodName    = "/indexing.v1.IndexingService/ListRunningJobs"
	IndexingService_ListRecentJobs_FullMethodName     = "/indexing.v1.IndexingService/ListRecentJobs"
	IndexingService_TriggerTagIndexing_FullMethodName = "/indexing.v1.IndexingService/TriggerTagIndexing"
)

// IndexingServiceClient is the client API for IndexingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IndexingService provides direct gRPC access to indexing operations
// This runs in parallel with the MCP natural language interface for Slack bot
type IndexingServiceClient interface {
	// Trigger a new indexing job
	TriggerIndexing(ctx context.Context, in *TriggerIndexingRequest, opts ...grpc.CallOption) (*TriggerIndexingResponse, error)
	// Get the status of a specific indexing job
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
	// List all running indexing jobs
	ListRunningJobs(ctx context.Context, in *ListRunningJobsRequest, opts ...grpc.CallOption) (*ListRunningJobsResponse, error)
	// List recent indexing jobs for a specific object type
	ListRecentJobs(ctx context.Context, in *ListRecentJobsRequest, opts ...grpc.CallOption) (*ListRecentJobsResponse, error)
	// Trigger tag indexing with flexible filtering by TagType and/or ContextType
	TriggerTagIndexing(ctx context.Context, in *TriggerTagIndexingRequest, opts ...grpc.CallOption) (*TriggerIndexingResponse, error)
}

type indexingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexingServiceClient(cc grpc.ClientConnInterface) IndexingServiceClient {
	return &indexingServiceClient{cc}
}

func (c *indexingServiceClient) TriggerIndexing(ctx context.Context, in *TriggerIndexingRequest, opts ...grpc.CallOption) (*TriggerIndexingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerIndexingResponse)
	err := c.cc.Invoke(ctx, IndexingService_TriggerIndexing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, IndexingService_GetJobStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) ListRunningJobs(ctx context.Context, in *ListRunningJobsRequest, opts ...grpc.CallOption) (*ListRunningJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunningJobsResponse)
	err := c.cc.Invoke(ctx, IndexingService_ListRunningJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) ListRecentJobs(ctx context.Context, in *ListRecentJobsRequest, opts ...grpc.CallOption) (*ListRecentJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecentJobsResponse)
	err := c.cc.Invoke(ctx, IndexingService_ListRecentJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexingServiceClient) TriggerTagIndexing(ctx context.Context, in *TriggerTagIndexingRequest, opts ...grpc.CallOption) (*TriggerIndexingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TriggerIndexingResponse)
	err := c.cc.Invoke(ctx, IndexingService_TriggerTagIndexing_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexingServiceServer is the server API for IndexingService service.
// All implementations must embed UnimplementedIndexingServiceServer
// for forward compatibility.
//
// IndexingService provides direct gRPC access to indexing operations
// This runs in parallel with the MCP natural language interface for Slack bot
type IndexingServiceServer interface {
	// Trigger a new indexing job
	TriggerIndexing(context.Context, *TriggerIndexingRequest) (*TriggerIndexingResponse, error)
	// Get the status of a specific indexing job
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
	// List all running indexing jobs
	ListRunningJobs(context.Context, *ListRunningJobsRequest) (*ListRunningJobsResponse, error)
	// List recent indexing jobs for a specific object type
	ListRecentJobs(context.Context, *ListRecentJobsRequest) (*ListRecentJobsResponse, error)
	// Trigger tag indexing with flexible filtering by TagType and/or ContextType
	TriggerTagIndexing(context.Context, *TriggerTagIndexingRequest) (*TriggerIndexingResponse, error)
	mustEmbedUnimplementedIndexingServiceServer()
}

// UnimplementedIndexingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexingServiceServer struct{}

func (UnimplementedIndexingServiceServer) TriggerIndexing(context.Context, *TriggerIndexingRequest) (*TriggerIndexingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerIndexing not implemented")
}
func (UnimplementedIndexingServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedIndexingServiceServer) ListRunningJobs(context.Context, *ListRunningJobsRequest) (*ListRunningJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunningJobs not implemented")
}
func (UnimplementedIndexingServiceServer) ListRecentJobs(context.Context, *ListRecentJobsRequest) (*ListRecentJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentJobs not implemented")
}
func (UnimplementedIndexingServiceServer) TriggerTagIndexing(context.Context, *TriggerTagIndexingRequest) (*TriggerIndexingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerTagIndexing not implemented")
}
func (UnimplementedIndexingServiceServer) mustEmbedUnimplementedIndexingServiceServer() {}
func (UnimplementedIndexingServiceServer) testEmbeddedByValue()                         {}

// UnsafeIndexingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexingServiceServer will
// result in compilation errors.
type UnsafeIndexingServiceServer interface {
	mustEmbedUnimplementedIndexingServiceServer()
}

func RegisterIndexingServiceServer(s grpc.ServiceRegistrar, srv IndexingServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndexingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexingService_ServiceDesc, srv)
}

func _IndexingService_TriggerIndexing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerIndexingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).TriggerIndexing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_TriggerIndexing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).TriggerIndexing(ctx, req.(*TriggerIndexingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_GetJobStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_ListRunningJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunningJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).ListRunningJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_ListRunningJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).ListRunningJobs(ctx, req.(*ListRunningJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_ListRecentJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecentJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).ListRecentJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_ListRecentJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).ListRecentJobs(ctx, req.(*ListRecentJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexingService_TriggerTagIndexing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerTagIndexingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexingServiceServer).TriggerTagIndexing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexingService_TriggerTagIndexing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexingServiceServer).TriggerTagIndexing(ctx, req.(*TriggerTagIndexingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexingService_ServiceDesc is the grpc.ServiceDesc for IndexingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indexing.v1.IndexingService",
	HandlerType: (*IndexingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerIndexing",
			Handler:    _IndexingService_TriggerIndexing_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _IndexingService_GetJobStatus_Handler,
		},
		{
			MethodName: "ListRunningJobs",
			Handler:    _IndexingService_ListRunningJobs_Handler,
		},
		{
			MethodName: "ListRecentJobs",
			Handler:    _IndexingService_ListRecentJobs_Handler,
		},
		{
			MethodName: "TriggerTagIndexing",
			Handler:    _IndexingService_TriggerTagIndexing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/indexing/indexing.proto",
}
